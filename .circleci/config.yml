version: 2
jobs:
#  shellcheck:
#    docker:
#      - image: koalaman/shellcheck-alpine:stable
#    steps:
#      - checkout
#      - run:
#          name: Check Shell Scripts
#          command: |
#            find . -type f -name '*.sh' | wc -l
#            find . -type f -name '*.sh' | xargs shellcheck --external-sources
  build:
    working_directory: /app
    docker:
      - image: docker:18.06.1-ce-git
        environment:
          POSTGRES_USER: conductor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Setup custom environment variables"
          command: |
            echo 'export MY_ENV_VAR=$REPOSITORY_URI >> $BASH_ENV
      - run: |
          apk update
          apk add --no-cache py-pip==10.0.1-r0
          pip install docker-compose==1.21.2 awscli==1.16.81
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t ${ECR_ENDPOINT}/${ECR_REPOSITORY} .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
#      - run:
#          name: Run tests
#          command: |
#            docker-compose -f ./docker-compose.test.yml up
      - deploy:
          name: Push application Docker image
          command: |
            REPOSITORY_URI=${ECR_ENDPOINT}/${ECR_REPOSITORY}
            IMAGE_TAG=$(echo $CIRCLE_SHA1 | cut -c 1-7)
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
              docker tag "${REPOSITORY_URI}:latest" "${REPOSITORY_URI}:${IMAGE_TAG}"
              docker push "${REPOSITORY_URI}:${IMAGE_TAG}"
              docker push "${REPOSITORY_URI}:latest"

              # Create task for docker deploy
              task_template='[
                  {
                    "name": "%s",
                    "image": "%s:%s",
                    "logConfiguration": {
                      "logDriver": "awslogs",
                      "options": {
                        "awslogs-group": "/ecs/fe-react",
                        "awslogs-region": "ap-southeast-1",
                        "awslogs-stream-prefix": "ecs"
                      }
                    },
                    "portMappings": [
                      {
                        "hostPort": 3000,
                        "protocol": "tcp",
                        "containerPort": 3000
                      }
                    ],
                    "cpu": 0,
                    "environment": [],
                    "memory": 512,
                    "memoryReservation": 450,
                    "essential": true
                  }
                ]'
              echo "$task_template"

              task_def=$(printf "$task_template" $ECS_TASK_NAME $REPOSITORY_URI $IMAGE_TAG)

              # Register task definition
              json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$ECS_TASK_FAMILY" --region "$AWS_DEFAULT_REGION" --requires-compatibilities FARGATE --network-mode awsvpc --execution-role-arn arn:aws:iam::512200996832:role/ecsTaskExecutionRole --cpu 256 --memory 512)

              # Grab revision # using regular bash and grep
              revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')

              echo $AWS_DEFAULT_REGION && echo $ECS_CLUSTER && echo $ECS_SERVICE && echo $ECS_TASK_NAME && echo $revision
              echo $POSTGRES_USER
              echo $MY_ENV_VAR

              # Deploy revision
              aws ecs update-service --region "$AWS_DEFAULT_REGION" --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --task-definition "$ECS_TASK_NAME":"$revision"
              return 0
            fi

#workflows:
#  version: 2
#  workflow:
#    jobs:
#      - shellcheck
#      - build-job:
#          requires:
#            - shellcheck
#          filters:
#            branches:
#              only: master
