version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.4
  aws-ecs: circleci/aws-ecs@0.0.5
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Setup custom environment variables"
          command: |
            echo 'export REPOSITORY_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY}"'\
                  >> $BASH_ENV
            echo 'export IMAGE_TAG="$(echo $CIRCLE_SHA1 | cut -c 1-7)"' >> $BASH_ENV
            echo 'export IAM_EXEC_ROLE="arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole"' >> $BASH_ENV
      - run: |
          apk update && apk add --no-cache py-pip==10.0.1-r0
          pip install docker-compose==1.21.2 awscli==1.16.81
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            source $BASH_ENV
            echo $REPOSITORY_URI
            docker build --cache-from=app -t ${REPOSITORY_URI} .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: Run tests
          command: |
            docker-compose -f ./docker-compose.test.yml up
      - deploy:
          name: Push application Docker image
          command: |
            source $BASH_ENV
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
              docker tag "${REPOSITORY_URI}:latest" "${REPOSITORY_URI}:${IMAGE_TAG}"
              docker push "${REPOSITORY_URI}:${IMAGE_TAG}"
              docker push "${REPOSITORY_URI}:latest"
            fi
  deploy:
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
          aws-region: $AWS_DEFAULT_REGION
      - aws-ecs/update-service:
          family: '${ECS_TASK_FAMILY}'
          cluster-name: '${ECS_CLUSTER}'
          container-image-name-updates: 'container=${ECS_SERVICE},tag=$(echo $CIRCLE_SHA1 | cut -c 1-7)'
workflows:
  version: 2.1
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - hold: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          requires: # We only run the "hold" job when build has succeeded
            - build
      - deploy:
          requires:
            - hold

